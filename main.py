import telebot
import requests
from bs4 import BeautifulSoup
import schedule
import time
import threading
import sqlite3
from datetime import datetime
import logging
import re
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–ø–æ–ª—É—á–∏—Ç–µ —É @BotFather)
BOT_TOKEN = ""

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
def init_db():
    conn = sqlite3.connect('ggsel_monitor.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS tracked_products (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            product_url TEXT,
            product_name TEXT,
            current_price REAL,
            last_check TIMESTAMP,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS price_history (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            product_url TEXT,
            price REAL,
            check_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞ —Å GGsel
def get_ggsel_price(url):
    try:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3',
            'Accept-Encoding': 'gzip, deflate, br',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
        }
        
        response = requests.get(url, headers=headers, timeout=15)
        response.raise_for_status()
        
        soup = BeautifulSoup(response.content, 'html.parser')
        
        # –°–ø–æ—Å–æ–± 1: –ü–æ–∏—Å–∫ –≤ JSON-LD —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        script_tags = soup.find_all('script', type='application/ld+json')
        for script in script_tags:
            try:
                data = json.loads(script.string)
                if isinstance(data, dict) and 'offers' in data:
                    price = data['offers'].get('price')
                    name = data.get('name')
                    if price and name:
                        return float(price), name
            except:
                continue
        
        # –°–ø–æ—Å–æ–± 2: –ü–æ–∏—Å–∫ –ø–æ –∫–ª–∞—Å—Å–∞–º –∏ –∞—Ç—Ä–∏–±—É—Ç–∞–º
        name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä"
        name_selectors = [
            'h1.product-name',
            'h1.product-title', 
            'h1.title',
            '.product-name',
            '.product-title',
            '[class*="product-name"]',
            'h1'
        ]
        
        for selector in name_selectors:
            name_element = soup.select_one(selector)
            if name_element and name_element.get_text().strip():
                name = name_element.get_text().strip()
                break
        
        # –°–ø–æ—Å–æ–± 3: –ü–æ–∏—Å–∫ —Ü–µ–Ω—ã - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
        price = None
        price_selectors = [
            '.product-price .price',
            '.price-current',
            '.product-price',
            '.cost',
            '.price',
            '[class*="price"]',
            '.product-cost',
            '.current-price',
            '.product__price',
            '.goods__price',
            '.item__price'
        ]
        
        for selector in price_selectors:
            price_elements = soup.select(selector)
            for element in price_elements:
                price_text = element.get_text().strip()
                if price_text:
                    # –ò—â–µ–º —á–∏—Å–ª–∞ –≤ —Ç–µ–∫—Å—Ç–µ
                    price_match = re.search(r'(\d+[\s\d]*(?:[.,]\d+)?)', price_text.replace(',', '.'))
                    if price_match:
                        try:
                            price_str = price_match.group(1).replace(' ', '').replace('\xa0', '')
                            price = float(price_str)
                            logging.info(f"–ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞ —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä {selector}: {price}")
                            return price, name
                        except ValueError:
                            continue
        
        # –°–ø–æ—Å–æ–± 4: –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ data-–∞—Ç—Ä–∏–±—É—Ç—ã
        price_elements = soup.find_all(attrs={"data-price": True})
        for element in price_elements:
            try:
                price = float(element['data-price'])
                logging.info(f"–ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞ —á–µ—Ä–µ–∑ data-–∞—Ç—Ä–∏–±—É—Ç: {price}")
                return price, name
            except (ValueError, KeyError):
                continue
        
        # –°–ø–æ—Å–æ–± 5: –ü–æ–∏—Å–∫ –≤ meta-—Ç–µ–≥–∞—Ö
        meta_price = soup.find('meta', property='product:price')
        if meta_price and meta_price.get('content'):
            try:
                price = float(meta_price['content'])
                logging.info(f"–ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞ —á–µ—Ä–µ–∑ meta-—Ç–µ–≥: {price}")
                return price, name
            except ValueError:
                pass
        
        # –°–ø–æ—Å–æ–± 6: –ü–æ–∏—Å–∫ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ GGsel
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±–æ–π —ç–ª–µ–º–µ–Ω—Ç —Å —Ü–µ–Ω–æ–π
        all_elements = soup.find_all(text=re.compile(r'\d+\s*\d*[.,]?\d*\s*[‚ÇΩ—Ä—Ä]'))
        for element in all_elements:
            price_match = re.search(r'(\d+[\s\d]*(?:[.,]\d+)?)', element.replace(',', '.'))
            if price_match:
                try:
                    price_str = price_match.group(1).replace(' ', '').replace('\xa0', '')
                    price = float(price_str)
                    logging.info(f"–ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫: {price}")
                    return price, name
                except ValueError:
                    continue
        
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ü–µ–Ω—É –¥–ª—è {url}")
        return None, name
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã –¥–ª—è {url}: {e}")
        return None, None

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
@bot.message_handler(commands=['start'])
def send_welcome(message):
    welcome_text = """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–æ–Ω–∏—Ç–æ—Ä —Ü–µ–Ω GGsel!

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/add <url> - –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
/list - –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã
/check <id> - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–Ω—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
/remove <id> - –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä —Å GGsel –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è!

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –¥–æ–º–µ–Ω—ã: ggsel.net, ggsel.com, ggsell.net
    """
    bot.reply_to(message, welcome_text)

# –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏
@bot.message_handler(commands=['help'])
def send_help(message):
    help_text = """
üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:

1. –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:
   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add <—Å—Å—ã–ª–∫–∞>
   - –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä

2. –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:
   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /list

3. –ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–Ω—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:
   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /check <ID —Ç–æ–≤–∞—Ä–∞>

4. –ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:
   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /remove <ID —Ç–æ–≤–∞—Ä–∞>

–ü—Ä–∏–º–µ—Ä—ã:
/add https://ggsel.net/example-product
/list
/check 1
/remove 1
    """
    bot.reply_to(message, help_text)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
@bot.message_handler(commands=['add'])
def add_product(message):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        if len(message.text.split()) < 2:
            bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä.\n–ü—Ä–∏–º–µ—Ä: /add https://ggsel.net/example-product")
            return
        
        url = message.text.split()[1]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ GGsel (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã)
        allowed_domains = ['ggsel.net', 'ggsel.com', 'ggsell.net']
        if not any(domain in url for domain in allowed_domains):
            bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫–∏ —Ç–æ–ª—å–∫–æ —Å —Å–∞–π—Ç–æ–≤ GGsel:\n- ggsel.net\n- ggsel.com\n- ggsell.net")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = bot.reply_to(message, "‚è≥ –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        price, name = get_ggsel_price(url)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        try:
            bot.delete_message(message.chat.id, processing_msg.message_id)
        except:
            pass
        
        if price is None:
            bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n‚Ä¢ –¢–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n‚Ä¢ –ò–∑–º–µ–Ω–∏–ª–∞—Å—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∞–π—Ç–∞\n‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('ggsel_monitor.db')
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO tracked_products (user_id, product_url, product_name, current_price, last_check)
            VALUES (?, ?, ?, ?, ?)
        ''', (message.chat.id, url, name, price, datetime.now()))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω
        cursor.execute('''
            INSERT INTO price_history (product_url, price)
            VALUES (?, ?)
        ''', (url, price))
        
        conn.commit()
        conn.close()
        
        bot.reply_to(message, f"‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!\nüì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\nüí∞ –¶–µ–Ω–∞: {price} —Ä—É–±.\nüïí –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–∞—á–∞—Ç–æ!")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.")

# –ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ —Å—Å—ã–ª–∫–µ
@bot.message_handler(func=lambda message: any(domain in message.text for domain in ['ggsel.net', 'ggsel.com', 'ggsell.net']) and not message.text.startswith('/'))
def quick_add_product(message):
    try:
        url = message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—Å—ã–ª–∫–∞
        if not url.startswith('http'):
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = bot.reply_to(message, "‚è≥ –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        price, name = get_ggsel_price(url)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        try:
            bot.delete_message(message.chat.id, processing_msg.message_id)
        except:
            pass
        
        if price is None:
            bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n‚Ä¢ –¢–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n‚Ä¢ –ò–∑–º–µ–Ω–∏–ª–∞—Å—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∞–π—Ç–∞\n‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('ggsel_monitor.db')
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO tracked_products (user_id, product_url, product_name, current_price, last_check)
            VALUES (?, ?, ?, ?, ?)
        ''', (message.chat.id, url, name, price, datetime.now()))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω
        cursor.execute('''
            INSERT INTO price_history (product_url, price)
            VALUES (?, ?)
        ''', (url, price))
        
        conn.commit()
        conn.close()
        
        bot.reply_to(message, f"‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!\nüì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\nüí∞ –¶–µ–Ω–∞: {price} —Ä—É–±.\nüïí –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–∞—á–∞—Ç–æ!")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±—ã—Å—Ç—Ä–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.")

# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π (list, check, remove, auto_check_prices, etc.)
# ... [–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π] ...

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
@bot.message_handler(commands=['list'])
def list_products(message):
    try:
        conn = sqlite3.connect('ggsel_monitor.db')
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT id, product_name, current_price, last_check 
            FROM tracked_products 
            WHERE user_id = ?
        ''', (message.chat.id,))
        
        products = cursor.fetchall()
        conn.close()
        
        if not products:
            bot.reply_to(message, "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.")
            return
        
        response = "üìã –í–∞—à–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã:\n\n"
        for product in products:
            product_id, name, price, last_check = product
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã timestamp
            try:
                if '.' in last_check:
                    last_check_formatted = datetime.strptime(last_check, '%Y-%m-%d %H:%M:%S.%f').strftime('%d.%m.%Y %H:%M')
                else:
                    last_check_formatted = datetime.strptime(last_check, '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y %H:%M')
            except:
                last_check_formatted = last_check
            
            response += f"üÜî ID: {product_id}\nüì¶ {name}\nüí∞ {price} —Ä—É–±.\nüïí –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {last_check_formatted}\n\n"
        
        response += "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /check <ID> –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω—ã –∏–ª–∏ /remove <ID> –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."
        bot.reply_to(message, response)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤.")

# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–Ω—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
@bot.message_handler(commands=['check'])
def check_product(message):
    try:
        if len(message.text.split()) < 2:
            bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞.\n–ü—Ä–∏–º–µ—Ä: /check 1")
            return
        
        product_id = int(message.text.split()[1])
        
        conn = sqlite3.connect('ggsel_monitor.db')
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT product_url, product_name, current_price 
            FROM tracked_products 
            WHERE id = ? AND user_id = ?
        ''', (product_id, message.chat.id))
        
        product = cursor.fetchone()
        
        if not product:
            conn.close()
            bot.reply_to(message, "‚ùå –¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        url, name, old_price = product
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
        new_price, _ = get_ggsel_price(url)
        
        if new_price is None:
            conn.close()
            bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É.")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –≤ –±–∞–∑–µ
        cursor.execute('''
            UPDATE tracked_products 
            SET current_price = ?, last_check = ? 
            WHERE id = ?
        ''', (new_price, datetime.now(), product_id))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        cursor.execute('''
            INSERT INTO price_history (product_url, price)
            VALUES (?, ?)
        ''', (url, new_price))
        
        conn.commit()
        conn.close()
        
        price_change = new_price - old_price
        if price_change < 0:
            change_emoji = "üü¢"
            change_text = f"üìâ –¶–µ–Ω–∞ —É–ø–∞–ª–∞ –Ω–∞ {abs(price_change):.2f} —Ä—É–±."
        elif price_change > 0:
            change_emoji = "üî¥"
            change_text = f"üìà –¶–µ–Ω–∞ –≤—ã—Ä–æ—Å–ª–∞ –Ω–∞ {price_change:.2f} —Ä—É–±."
        else:
            change_emoji = "‚ö™"
            change_text = "üíé –¶–µ–Ω–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å"
        
        response = f"üìä –ê–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\nüì¶ {name}\nüí∞ –¶–µ–Ω–∞: {new_price} —Ä—É–±.\n{change_emoji} {change_text}"
        bot.reply_to(message, response)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–≤–∞—Ä–∞: {e}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–≤–∞—Ä–∞.")

# –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
@bot.message_handler(commands=['remove'])
def remove_product(message):
    try:
        if len(message.text.split()) < 2:
            bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞.\n–ü—Ä–∏–º–µ—Ä: /remove 1")
            return
        
        product_id = int(message.text.split()[1])
        
        conn = sqlite3.connect('ggsel_monitor.db')
        cursor = conn.cursor()
        
        cursor.execute('''
            DELETE FROM tracked_products 
            WHERE id = ? AND user_id = ?
        ''', (product_id, message.chat.id))
        
        if cursor.rowcount == 0:
            conn.close()
            bot.reply_to(message, "‚ùå –¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        conn.commit()
        conn.close()
        
        bot.reply_to(message, f"‚úÖ –¢–æ–≤–∞—Ä —Å ID {product_id} —É–¥–∞–ª–µ–Ω –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω
def auto_check_prices():
    try:
        conn = sqlite3.connect('ggsel_monitor.db')
        cursor = conn.cursor()
        
        cursor.execute('SELECT id, user_id, product_url, product_name, current_price FROM tracked_products')
        products = cursor.fetchall()
        
        for product in products:
            product_id, user_id, url, name, old_price = product
            
            new_price, _ = get_ggsel_price(url)
            
            if new_price is not None and new_price != old_price:
                # –¶–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                price_change = new_price - old_price
                if price_change < 0:
                    change_emoji = "üü¢"
                    change_text = f"—É–ø–∞–ª–∞ –Ω–∞ {abs(price_change):.2f} —Ä—É–±."
                else:
                    change_emoji = "üî¥" 
                    change_text = f"–≤—ã—Ä–æ—Å–ª–∞ –Ω–∞ {price_change:.2f} —Ä—É–±."
                
                message = f"{change_emoji} –¶–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å!\n\nüì¶ {name}\nüí∞ –ë—ã–ª–æ: {old_price} —Ä—É–±.\nüí∞ –°—Ç–∞–ª–æ: {new_price} —Ä—É–±.\nüìä {change_text}"
                
                try:
                    bot.send_message(user_id, message)
                except Exception as e:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –≤ –±–∞–∑–µ
                cursor.execute('''
                    UPDATE tracked_products 
                    SET current_price = ?, last_check = ? 
                    WHERE id = ?
                ''', (new_price, datetime.now(), product_id))
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                cursor.execute('''
                    INSERT INTO price_history (product_url, price)
                    VALUES (?, ?)
                ''', (url, new_price))
        
        conn.commit()
        conn.close()
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–Ω: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
def run_scheduler():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
    schedule.every(30).minutes.do(auto_check_prices)
    
    while True:
        schedule.run_pending()
        time.sleep(1)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
    scheduler_thread.start()
    
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")