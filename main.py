import telebot
from telebot import types
import requests
from bs4 import BeautifulSoup
import sqlite3
import time
import schedule
import threading
from datetime import datetime
import re

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot('8406426014:AAHSvck3eXH6p8J34q7HID2A-ZoPXfaHbag')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('yandex_market.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            registered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS products (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            product_name TEXT,
            product_url TEXT,
            target_price REAL,
            current_price REAL,
            last_check TIMESTAMP,
            is_active BOOLEAN DEFAULT TRUE,
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS price_history (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            product_id INTEGER,
            price REAL,
            checked_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (product_id) REFERENCES products (id)
        )
    ''')
    
    conn.commit()
    conn.close()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def register_user(user_id, username, first_name, last_name):
    conn = sqlite3.connect('yandex_market.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        INSERT OR IGNORE INTO users (user_id, username, first_name, last_name)
        VALUES (?, ?, ?, ?)
    ''', (user_id, username, first_name, last_name))
    
    conn.commit()
    conn.close()

# –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –Ø–Ω–¥–µ–∫—Å –ú–∞—Ä–∫–µ—Ç–∞
class SimpleYandexMarketParser:
    def __init__(self):
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
        }
    
    def search_products(self, query, max_results=5):
        """
        –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –Ø–Ω–¥–µ–∫—Å –ú–∞—Ä–∫–µ—Ç–µ
        """
        try:
            # –ö–æ–¥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è URL
            encoded_query = requests.utils.quote(query)
            url = f"https://market.yandex.ru/"
            
            response = requests.get(url, headers=self.headers, timeout=15)
            response.raise_for_status()
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π html.parser –≤–º–µ—Å—Ç–æ lxml
            soup = BeautifulSoup(response.text, 'html.parser')
            
            # –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã)
            return self.get_demo_products(query, max_results)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
            return self.get_demo_products(query, max_results)
    
    def get_demo_products(self, query, max_results):
        """–î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        demo_products = []
        base_price = 1000
        
        for i in range(max_results):
            demo_products.append({
                'name': f'{query} - –ú–æ–¥–µ–ª—å {i+1}',
                'price': base_price * (i + 1),
                'rating': round(4.0 + i * 0.2, 1),
                'reviews': (i + 1) * 10,
                'link': f'https://market.yandex.ru/product/demo-{i+1}',
                'image': ''
            })
        
        return demo_products
    
    def get_product_price(self, product_url):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞ (–¥–µ–º–æ-–≤–µ—Ä—Å–∏—è)
        """
        try:
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–∞—Ä—Å–∏–Ω–≥
            # –î–ª—è –¥–µ–º–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ü–µ–Ω—É
            import random
            return random.randint(500, 5000)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã: {e}")
            return 0

# –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
parser = SimpleYandexMarketParser()

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start', 'main', 'hello'])
def send_welcome(message):
    user = message.from_user
    register_user(user.id, user.username, user.first_name, user.last_name)
    
    welcome_text = f"""
üéâ –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

–Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω –Ω–∞ –Ø–Ω–¥–µ–∫—Å –ú–∞—Ä–∫–µ—Ç–µ.

üìä –ß—Ç–æ —è —É–º–µ—é:
‚Ä¢ –ò—Å–∫–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –Ω–∞ –Ø–Ω–¥–µ–∫—Å –ú–∞—Ä–∫–µ—Ç–µ
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω
‚Ä¢ –£–≤–µ–¥–æ–º–ª—è—Ç—å –æ —Å–∫–∏–¥–∫–∞—Ö
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω

üéØ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/search - –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä
/add - –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
/my_products - –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã
/check - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–Ω—ã
/help - –ü–æ–º–æ—â—å

üí° –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /search —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä!

‚ö†Ô∏è –°–µ–π—á–∞—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–µ–º–æ-—Ä–µ–∂–∏–º —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
    """
    
    bot.send_message(message.chat.id, welcome_text)
    show_main_menu(message)

def show_main_menu(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞')
    btn2 = types.KeyboardButton('üìä –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã')
    btn3 = types.KeyboardButton('üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–Ω—ã')
    btn4 = types.KeyboardButton('‚ÑπÔ∏è –ü–æ–º–æ—â—å')
    markup.add(btn1, btn2)
    markup.add(btn3, btn4)
    
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

# –ö–æ–º–∞–Ω–¥–∞ /help
@bot.message_handler(commands=['help'])
def send_help(message):
    help_text = """
üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

üîç /search - –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –Ø–Ω–¥–µ–∫—Å –ú–∞—Ä–∫–µ—Ç–µ
üìù /add - –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
üìä /my_products - –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã
üîÑ /check - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã

üîé –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /search –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞
2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è —Ç–æ–≤–∞—Ä
3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
4. –£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Ü–µ–Ω—É
5. –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã!

‚è∞ –ë–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤.

‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –°–µ–π—á–∞—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–µ–º–æ-—Ä–µ–∂–∏–º —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
    """
    
    bot.send_message(message.chat.id, help_text)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=['text'])
def handle_text(message):
    if message.text == 'üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞':
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
        bot.register_next_step_handler(message, process_search_query)
    
    elif message.text == 'üìä –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã':
        show_user_products(message)
    
    elif message.text == 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–Ω—ã':
        check_prices_now(message)
    
    elif message.text == '‚ÑπÔ∏è –ü–æ–º–æ—â—å':
        send_help(message)
    
    else:
        bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã")

# –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤
@bot.message_handler(commands=['search'])
def search_products(message):
    bot.send_message(message.chat.id, "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å –ú–∞—Ä–∫–µ—Ç–µ:")
    bot.register_next_step_handler(message, process_search_query)

def process_search_query(message):
    query = message.text
    if len(query) < 2:
        bot.send_message(message.chat.id, "‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    bot.send_message(message.chat.id, "üîé –ò—â—É —Ç–æ–≤–∞—Ä—ã...")
    
    products = parser.search_products(query, max_results=5)
    
    if not products:
        bot.send_message(message.chat.id, "‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
    for i, product in enumerate(products, 1):
        product_text = format_product_info(product, i)
        bot.send_message(message.chat.id, product_text, parse_mode='HTML')
    
    bot.send_message(message.chat.id, 
                    "üí° –ß—Ç–æ–±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–æ–≤–∞—Ä, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add")

def format_product_info(product, number=1):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ"""
    rating_text = f"‚≠ê {product['rating']}" if product['rating'] > 0 else "‚≠ê –ù–µ—Ç –æ—Ü–µ–Ω–æ–∫"
    reviews_text = f"üìù {product['reviews']} –æ—Ç–∑—ã–≤–æ–≤" if product['reviews'] > 0 else "üìù –ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤"
    
    return f"""
<b>–¢–æ–≤–∞—Ä #{number}</b>
üè∑Ô∏è <b>{product['name']}</b>
üí∞ <b>–¶–µ–Ω–∞: {product['price']:,} ‚ÇΩ</b>
{rating_text} | {reviews_text}
üîó <a href="{product['link']}">–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä</a>
    """.replace(',', ' ')

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
@bot.message_handler(commands=['add'])
def add_product(message):
    bot.send_message(message.chat.id, 
                    "üîó –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä —Å –Ø–Ω–¥–µ–∫—Å –ú–∞—Ä–∫–µ—Ç–∞\n\n"
                    "–ü—Ä–∏–º–µ—Ä:\n"
                    "https://market.yandex.ru/product/123456789\n\n"
                    "–ò–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –¥–µ–º–æ:")
    bot.register_next_step_handler(message, process_product_url)

def process_product_url(message):
    user_input = message.text.strip()
    
    # –ï—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞
    if 'market.yandex.ru' in user_input:
        url = user_input
        product_name = "–¢–æ–≤–∞—Ä —Å –Ø–Ω–¥–µ–∫—Å –ú–∞—Ä–∫–µ—Ç–∞"
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–¥–µ–º–æ-—Ä–µ–∂–∏–º)
        url = f"https://market.yandex.ru/product/demo-{hash(user_input) % 1000}"
        product_name = user_input
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–µ–ª–µ–≤—É—é —Ü–µ–Ω—É
    bot.send_message(message.chat.id, "üí∞ –£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é —Ü–µ–Ω—É (–≤ —Ä—É–±–ª—è—Ö):\n–ü—Ä–∏–º–µ—Ä: 5000")
    bot.register_next_step_handler(message, process_target_price, url, product_name)

def process_target_price(message, product_url, product_name):
    try:
        target_price = float(message.text.replace(' ', '').replace(',', '.'))
        
        if target_price <= 0:
            bot.send_message(message.chat.id, "‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É (–¥–µ–º–æ)
        current_price = parser.get_product_price(product_url)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('yandex_market.db')
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO products (user_id, product_name, product_url, target_price, current_price, last_check)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (message.from_user.id, product_name, product_url, target_price, current_price, datetime.now()))
        
        conn.commit()
        conn.close()
        
        bot.send_message(message.chat.id,
                        f"‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è!\n\n"
                        f"üè∑Ô∏è {product_name}\n"
                        f"üéØ –¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞: {target_price} ‚ÇΩ\n"
                        f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price} ‚ÇΩ\n"
                        f"üîó {product_url}\n\n"
                        f"üìä –ë–æ—Ç –±—É–¥–µ—Ç —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–∞—Å –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã!")
        
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5000)")

# –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(commands=['my_products'])
def show_user_products(message):
    user_id = message.from_user.id
    
    conn = sqlite3.connect('yandex_market.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT id, product_name, product_url, target_price, current_price, last_check
        FROM products 
        WHERE user_id = ? AND is_active = TRUE
        ORDER BY last_check DESC
    ''', (user_id,))
    
    products = cursor.fetchall()
    conn.close()
    
    if not products:
        bot.send_message(message.chat.id, 
                        "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä.")
        return
    
    for product in products:
        product_id, name, url, target_price, current_price, last_check = product
        
        status = "üéâ –¶–µ–Ω–∞ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!" if current_price <= target_price else "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ"
        
        product_info = f"""
<b>–¢–æ–≤–∞—Ä #{product_id}</b>
üè∑Ô∏è {name}
üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <b>{current_price:,} ‚ÇΩ</b>
üéØ –¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞: <b>{target_price:,} ‚ÇΩ</b>
üìä –°—Ç–∞—Ç—É—Å: {status}
üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {last_check}
üîó <a href="{url}">–°—Å—ã–ª–∫–∞</a>
        """.replace(',', ' ')
        
        # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        markup = types.InlineKeyboardMarkup()
        btn_check = types.InlineKeyboardButton('üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å', callback_data=f'check_{product_id}')
        btn_delete = types.InlineKeyboardButton('‚ùå –£–¥–∞–ª–∏—Ç—å', callback_data=f'delete_{product_id}')
        markup.add(btn_check, btn_delete)
        
        bot.send_message(message.chat.id, product_info, parse_mode='HTML', reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    if call.data.startswith('check_'):
        product_id = int(call.data.split('_')[1])
        check_single_product(call.message, product_id)
    
    elif call.data.startswith('delete_'):
        product_id = int(call.data.split('_')[1])
        delete_product(call.message, product_id)

def check_single_product(message, product_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
    conn = sqlite3.connect('yandex_market.db')
    cursor = conn.cursor()
    
    cursor.execute('SELECT product_url, current_price, product_name FROM products WHERE id = ?', (product_id,))
    product = cursor.fetchone()
    
    if product:
        product_url, old_price, product_name = product
        new_price = parser.get_product_price(product_url)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –≤ –±–∞–∑–µ
        cursor.execute('''
            UPDATE products 
            SET current_price = ?, last_check = ?
            WHERE id = ?
        ''', (new_price, datetime.now(), product_id))
        
        conn.commit()
        
        bot.send_message(message.chat.id, 
                        f"üè∑Ô∏è {product_name}\n"
                        f"üí∞ –¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n"
                        f"üìä –ë—ã–ª–æ: {old_price} ‚ÇΩ\n"
                        f"üìà –°—Ç–∞–ª–æ: {new_price} ‚ÇΩ")
    
    conn.close()

def delete_product(message, product_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
    conn = sqlite3.connect('yandex_market.db')
    cursor = conn.cursor()
    
    cursor.execute('UPDATE products SET is_active = FALSE WHERE id = ?', (product_id,))
    conn.commit()
    conn.close()
    
    bot.send_message(message.chat.id, "‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ü–µ–Ω
@bot.message_handler(commands=['check'])
def check_prices_now(message):
    user_id = message.from_user.id
    bot.send_message(message.chat.id, "üîç –ü—Ä–æ–≤–µ—Ä—è—é —Ü–µ–Ω—ã –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤...")
    
    conn = sqlite3.connect('yandex_market.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT id, product_url, product_name, current_price, target_price
        FROM products 
        WHERE user_id = ? AND is_active = TRUE
    ''', (user_id,))
    
    products = cursor.fetchall()
    
    updated_count = 0
    for product in products:
        product_id, url, name, old_price, target_price = product
        new_price = parser.get_product_price(url)
        
        if new_price > 0 and new_price != old_price:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É
            cursor.execute('''
                UPDATE products 
                SET current_price = ?, last_check = ?
                WHERE id = ?
            ''', (new_price, datetime.now(), product_id))
            
            updated_count += 1
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã
            if new_price <= target_price:
                bot.send_message(message.chat.id,
                                f"üéâ –¶–ï–õ–ï–í–ê–Ø –¶–ï–ù–ê –î–û–°–¢–ò–ì–ù–£–¢–ê!\n\n"
                                f"üè∑Ô∏è {name}\n"
                                f"üí∞ –ù–æ–≤–∞—è —Ü–µ–Ω–∞: {new_price} ‚ÇΩ\n"
                                f"üéØ –¶–µ–ª—å: {target_price} ‚ÇΩ")
            else:
                bot.send_message(message.chat.id,
                                f"üìà –ò–ó–ú–ï–ù–ï–ù–ò–ï –¶–ï–ù–´\n\n"
                                f"üè∑Ô∏è {name}\n"
                                f"üìâ –ë—ã–ª–æ: {old_price} ‚ÇΩ\n"
                                f"üìà –°—Ç–∞–ª–æ: {new_price} ‚ÇΩ")
    
    conn.commit()
    conn.close()
    
    if updated_count == 0:
        bot.send_message(message.chat.id, "‚úÖ –í—Å–µ —Ü–µ–Ω—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã!")
    else:
        bot.send_message(message.chat.id, f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} —Ü–µ–Ω.")

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω
def background_price_checker():
    def job():
        try:
            conn = sqlite3.connect('yandex_market.db')
            cursor = conn.cursor()
            
            cursor.execute('SELECT DISTINCT user_id FROM products WHERE is_active = TRUE')
            users = cursor.fetchall()
            
            for user in users:
                user_id = user[0]
                
                cursor.execute('''
                    SELECT id, product_url, product_name, current_price, target_price
                    FROM products 
                    WHERE user_id = ? AND is_active = TRUE
                ''', (user_id,))
                
                products = cursor.fetchall()
                
                for product in products:
                    product_id, url, name, old_price, target_price = product
                    new_price = parser.get_product_price(url)
                    
                    if new_price > 0 and new_price != old_price:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É
                        cursor.execute('''
                            UPDATE products 
                            SET current_price = ?, last_check = ?
                            WHERE id = ?
                        ''', (new_price, datetime.now(), product_id))
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        if new_price <= target_price:
                            bot.send_message(user_id,
                                            f"üéâ –¶–ï–õ–ï–í–ê–Ø –¶–ï–ù–ê –î–û–°–¢–ò–ì–ù–£–¢–ê!\n\n"
                                            f"üè∑Ô∏è {name}\n"
                                            f"üí∞ –ù–æ–≤–∞—è —Ü–µ–Ω–∞: {new_price} ‚ÇΩ\n"
                                            f"üéØ –¶–µ–ª—å: {target_price} ‚ÇΩ")
                        else:
                            bot.send_message(user_id,
                                            f"üìà –ò–ó–ú–ï–ù–ï–ù–ò–ï –¶–ï–ù–´\n\n"
                                            f"üè∑Ô∏è {name}\n"
                                            f"üìâ –ë—ã–ª–æ: {old_price} ‚ÇΩ\n"
                                            f"üìà –°—Ç–∞–ª–æ: {new_price} ‚ÇΩ")
            
            conn.commit()
            conn.close()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞
    schedule.every(2).hours.do(job)
    
    while True:
        schedule.run_pending()
        time.sleep(60)

# –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
def start_background_jobs():
    thread = threading.Thread(target=background_price_checker, daemon=True)
    thread.start()

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
if __name__ == '__main__':
    print("ü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ø–Ω–¥–µ–∫—Å –ú–∞—Ä–∫–µ—Ç–∞...")
    init_db()
    start_background_jobs()
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! (–î–µ–º–æ-—Ä–µ–∂–∏–º)")
    bot.infinity_polling()