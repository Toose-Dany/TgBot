import telebot
from telebot import types
import requests
from bs4 import BeautifulSoup
import sqlite3
import time
import schedule
import threading
from datetime import datetime
import re
import json
import urllib.parse
import os
import random
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from webdriver_manager.chrome import ChromeDriverManager

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot('8406426014:AAHSvck3eXH6p8J34q7HID2A-ZoPXfaHbag')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('ggsel_market.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            registered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS products (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            product_name TEXT,
            product_url TEXT,
            target_price REAL,
            current_price REAL,
            last_check TIMESTAMP,
            is_active BOOLEAN DEFAULT TRUE,
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS price_history (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            product_id INTEGER,
            price REAL,
            checked_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (product_id) REFERENCES products (id)
        )
    ''')
    
    conn.commit()
    conn.close()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def register_user(user_id, username, first_name, last_name):
    conn = sqlite3.connect('ggsel_market.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        INSERT OR IGNORE INTO users (user_id, username, first_name, last_name)
        VALUES (?, ?, ?, ?)
    ''', (user_id, username, first_name, last_name))
    
    conn.commit()
    conn.close()

# –ü–∞—Ä—Å–µ—Ä –¥–ª—è GGsel
class GGselParser:
    def __init__(self, headless=True):
        self.headless = headless
        self.driver = None
        self.init_driver()
    
    def init_driver(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Chrome –¥—Ä–∞–π–≤–µ—Ä–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π"""
        try:
            print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Chrome –¥—Ä–∞–π–≤–µ—Ä–∞ –¥–ª—è GGsel...")
            
            chrome_options = Options()
            
            if self.headless:
                chrome_options.add_argument("--headless=new")
            
            chrome_options.add_argument("--no-sandbox")
            chrome_options.add_argument("--disable-dev-shm-usage")
            chrome_options.add_argument("--disable-blink-features=AutomationControlled")
            chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
            chrome_options.add_experimental_option('useAutomationExtension', False)
            chrome_options.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")
            chrome_options.add_argument("--window-size=1920,1080")
            chrome_options.add_argument("--disable-gpu")
            chrome_options.add_argument("--disable-extensions")
            chrome_options.add_argument("--disable-images")
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ ChromeDriver
            service = Service(ChromeDriverManager().install())
            self.driver = webdriver.Chrome(service=service, options=chrome_options)
            
            self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            print("‚úÖ Chrome –¥—Ä–∞–π–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è GGsel")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Chrome –¥—Ä–∞–π–≤–µ—Ä–∞: {e}")
            self.driver = None
    
    def save_debug_screenshot(self, filename):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        if not self.driver:
            return None
            
        debug_dir = "debug_pages_ggsel"
        if not os.path.exists(debug_dir):
            os.makedirs(debug_dir)
        
        filepath = os.path.join(debug_dir, filename)
        self.driver.save_screenshot(filepath)
        print(f"üì∏ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç: {filepath}")
        return filepath
    
    def save_debug_html(self, filename):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å HTML –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        if not self.driver:
            return None
            
        debug_dir = "debug_pages_ggsel"
        if not os.path.exists(debug_dir):
            os.makedirs(debug_dir)
        
        filepath = os.path.join(debug_dir, filename)
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(self.driver.page_source)
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω HTML: {filepath}")
        return filepath

    def search_products(self, query, max_results=5):
        """
        –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ GGsel
        """
        if not self.driver:
            return ["selenium_error"]
        
        try:
            encoded_query = urllib.parse.quote(query)
            url = f"https://ggsel.com/goods?search={encoded_query}"
            
            print(f"\nüîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –Ω–∞ GGsel: '{query}'")
            print(f"üåê URL: {url}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            self.driver.get(url)
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            time.sleep(5)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ HTML –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            self.save_debug_screenshot(f"ggsel_search_{timestamp}_{query[:10]}.png")
            self.save_debug_html(f"ggsel_search_{timestamp}_{query[:10]}.html")
            
            # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
            self.driver.execute_script("window.scrollTo(0, document.body.scrollHeight/2);")
            time.sleep(2)
            self.driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
            time.sleep(2)
            
            # –ü–∞—Ä—Å–∏–º —Ç–æ–≤–∞—Ä—ã —Å GGsel
            products = self.parse_ggsel_products(max_results)
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ GGsel: {len(products)}")
            return products
            
        except Exception as e:
            print(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –Ω–∞ GGsel: {e}")
            return ["error"]

    def parse_ggsel_products(self, max_results):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤ —Å GGsel"""
        products = []
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            soup = BeautifulSoup(self.driver.page_source, 'html.parser')
            
            # –ò—â–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ GGsel
            product_selectors = [
                '.product-item',
                '.goods-item',
                '.item-product',
                '[class*="product"]',
                '[class*="goods"]',
                '.card',
                '.product-card'
            ]
            
            product_cards = []
            for selector in product_selectors:
                found_cards = soup.select(selector)
                print(f"üîç –°–µ–ª–µ–∫—Ç–æ—Ä '{selector}': –Ω–∞–π–¥–µ–Ω–æ {len(found_cards)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                if found_cards:
                    product_cards = found_cards
                    break
            
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
            if not product_cards:
                product_cards = soup.find_all('div', class_=lambda x: x and any(word in str(x).lower() for word in ['product', 'goods', 'item', 'card']))
                print(f"üîç –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫: {len(product_cards)} –∫–∞—Ä—Ç–æ—á–µ–∫")
            
            print(f"üõç –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ GGsel: {len(product_cards)}")
            
            for i, card in enumerate(product_cards[:max_results]):
                print(f"   –ü–∞—Ä—Å–∏–º –∫–∞—Ä—Ç–æ—á–∫—É GGsel {i+1}...")
                product = self.parse_ggsel_product_card(card)
                if product and product['name'] and product['price'] > 0:
                    products.append(product)
                    print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä —Å GGsel: {product['name'][:50]}... - {product['price']} —Ä—É–±.")
                elif product:
                    print(f"   ‚ùå –ü—Ä–æ–ø—É—â–µ–Ω —Ç–æ–≤–∞—Ä: –Ω–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∏–ª–∏ —Ü–µ–Ω—ã")
            
            return products
            
        except Exception as e:
            print(f"üí• –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å GGsel: {e}")
            return []

    def parse_ggsel_product_card(self, card):
        """–ü–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞ —Å GGsel"""
        try:
            product = {
                'name': '',
                'price': 0,
                'rating': 0,
                'reviews': 0,
                'link': '',
                'image': '',
                'seller': '',
                'platform': 'GGsel'
            }
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            name_selectors = [
                'h3 a',
                '.title a',
                '.name a',
                '.product-title a',
                '.goods-name a',
                'a[class*="title"]',
                'a[class*="name"]'
            ]
            
            for selector in name_selectors:
                name_elem = card.select_one(selector)
                if name_elem:
                    product['name'] = name_elem.get_text(strip=True)
                    href = name_elem.get('href')
                    if href:
                        if href.startswith('//'):
                            href = 'https:' + href
                        elif href.startswith('/'):
                            href = 'https://ggsel.com' + href
                        product['link'] = href
                    break
            
            # –¶–µ–Ω–∞
            price_selectors = [
                '.price',
                '.cost',
                '.product-price',
                '.goods-price',
                '[class*="price"]',
                '.current-price',
                '.new-price'
            ]
            
            for selector in price_selectors:
                price_elem = card.select_one(selector)
                if price_elem:
                    price_text = price_elem.get_text(strip=True)
                    # –ò—â–µ–º —á–∏—Å–ª–æ –≤ —Ç–µ–∫—Å—Ç–µ —Ü–µ–Ω—ã (—É—á–∏—Ç—ã–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—ã —Ç–∏–ø–∞ "1 299 ‚ÇΩ", "1,299 —Ä—É–±." –∏ —Ç.–¥.)
                    price_match = re.search(r'(\d[\d\s,]*)', price_text.replace(' ', '').replace(',', ''))
                    if price_match:
                        try:
                            product['price'] = float(price_match.group(1).replace(' ', '').replace(',', ''))
                            break
                        except ValueError:
                            continue
            
            # –†–µ–π—Ç–∏–Ω–≥ (–µ—Å–ª–∏ –µ—Å—Ç—å –Ω–∞ GGsel)
            rating_selectors = [
                '.rating',
                '.stars',
                '[class*="rating"]',
                '.product-rating'
            ]
            
            for selector in rating_selectors:
                rating_elem = card.select_one(selector)
                if rating_elem:
                    rating_text = rating_elem.get_text(strip=True)
                    rating_match = re.search(r'(\d+[.,]?\d*)', rating_text)
                    if rating_match:
                        try:
                            product['rating'] = float(rating_match.group(1).replace(',', '.'))
                            break
                        except ValueError:
                            continue
            
            # –ü—Ä–æ–¥–∞–≤–µ—Ü
            seller_selectors = [
                '.seller',
                '.shop',
                '.store',
                '[class*="seller"]',
                '[class*="shop"]'
            ]
            
            for selector in seller_selectors:
                seller_elem = card.select_one(selector)
                if seller_elem:
                    product['seller'] = seller_elem.get_text(strip=True)
                    break
            
            # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img_selectors = [
                'img',
                '.product-image img',
                '.goods-image img',
                '[class*="image"] img'
            ]
            
            for selector in img_selectors:
                img_elem = card.select_one(selector)
                if img_elem:
                    src = img_elem.get('src') or img_elem.get('data-src')
                    if src:
                        if src.startswith('//'):
                            src = 'https:' + src
                        elif src.startswith('/'):
                            src = 'https://ggsel.com' + src
                        product['image'] = src
                        break
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–≤–∞—Ä –≤–∞–ª–∏–¥–Ω—ã–π
            if not product['name'] or product['price'] == 0:
                return None
                
            return product
            
        except Exception as e:
            print(f"üí• –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ GGsel: {e}")
            return None

    def get_product_price(self, product_url):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞ –ø–æ —Å—Å—ã–ª–∫–µ —Å GGsel"""
        if not self.driver:
            return 0
            
        try:
            print(f"üí∞ –ü–æ–ª—É—á–∞—é —Ü–µ–Ω—É —Å GGsel –¥–ª—è: {product_url}")
            
            if not product_url.startswith('http'):
                product_url = 'https://ggsel.com' + product_url
            
            self.driver.get(product_url)
            time.sleep(4)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            self.save_debug_screenshot(f"ggsel_price_{timestamp}.png")
            self.save_debug_html(f"ggsel_price_{timestamp}.html")
            
            # –ü–∞—Ä—Å–∏–º —Ü–µ–Ω—É —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞
            soup = BeautifulSoup(self.driver.page_source, 'html.parser')
            
            # –ò—â–µ–º —Ü–µ–Ω—É –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö –Ω–∞ GGsel
            price_selectors = [
                '.price',
                '.product-price',
                '.current-price',
                '.goods-price',
                '[class*="price"]',
                '.cost'
            ]
            
            for selector in price_selectors:
                price_elem = soup.select_one(selector)
                if price_elem:
                    price_text = price_elem.get_text(strip=True)
                    price_match = re.search(r'(\d[\d\s,]*)', price_text.replace(' ', '').replace(',', ''))
                    if price_match:
                        try:
                            price = float(price_match.group(1).replace(' ', '').replace(',', ''))
                            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞ –Ω–∞ GGsel: {price} —Ä—É–±.")
                            return price
                        except ValueError:
                            continue
            
            print("‚ùå –¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç–æ–≤–∞—Ä–∞ GGsel")
            return 0
            
        except Exception as e:
            print(f"üí• –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã —Å GGsel: {e}")
            return 0
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä"""
        if self.driver:
            self.driver.quit()
            print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")

# –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä –¥–ª—è GGsel
try:
    parser = GGselParser(headless=True)
    print("‚úÖ –ü–∞—Ä—Å–µ—Ä GGsel –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞ GGsel: {e}")
    parser = None

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start', 'main', 'hello'])
def send_welcome(message):
    user = message.from_user
    register_user(user.id, user.username, user.first_name, user.last_name)
    
    status_text = "‚ö° –†–ï–ê–õ–¨–ù–´–ô –†–ï–ñ–ò–ú - —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ GGsel!" if parser and parser.driver else "‚ö†Ô∏è –î–ï–ú–û-–†–ï–ñ–ò–ú - –ø—Ä–æ–±–ª–µ–º—ã —Å –±—Ä–∞—É–∑–µ—Ä–æ–º"
    
    welcome_text = f"""
 –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

–Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω –Ω–∞ GGsel.com - –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ –∏–≥—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.

{status_text}

 –ß—Ç–æ —è —É–º–µ—é:
‚Ä¢ –ò—Å–∫–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –Ω–∞ GGsel (–∏–≥—Ä—ã, –∫–ª—é—á–∏, –∞–∫–∫–∞—É–Ω—Ç—ã)
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω
‚Ä¢ –£–≤–µ–¥–æ–º–ª—è—Ç—å –æ —Å–∫–∏–¥–∫–∞—Ö
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω

 –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/search - –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä –Ω–∞ GGsel
/add - –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
/my_products - –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã
/check - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–Ω—ã
/help - –ü–æ–º–æ—â—å
/debug - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞

üí° –ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞ GGsel!
    """
    
    bot.send_message(message.chat.id, welcome_text)
    show_main_menu(message)

def show_main_menu(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞')
    btn2 = types.KeyboardButton('–ú–æ–∏ —Ç–æ–≤–∞—Ä—ã')
    btn3 = types.KeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–Ω—ã')
    btn4 = types.KeyboardButton('–ü–æ–º–æ—â—å')
    btn5 = types.KeyboardButton('–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞')
    markup.add(btn1, btn2)
    markup.add(btn3, btn4, btn5)
    
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

# –ö–æ–º–∞–Ω–¥–∞ /help
@bot.message_handler(commands=['help'])
def send_help(message):
    status_text = "‚ö° –†–ï–ê–õ–¨–ù–´–ô –†–ï–ñ–ò–ú" if parser and parser.driver else "‚ö†Ô∏è –î–ï–ú–û-–†–ï–ñ–ò–ú"
    
    help_text = f"""
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/search - –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ GGsel
/add - –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
/my_products - –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã
/check - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã
/debug - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞

{status_text}

‚ö° –ü–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ Selenium:
‚Ä¢ –ù–∞—Ö–æ–¥–∏—Ç —Ç–æ–≤–∞—Ä—ã –Ω–∞ GGsel.com
‚Ä¢ –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã
‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç —Å –∏–≥—Ä–∞–º–∏, –∫–ª—é—á–∞–º–∏, –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏

–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /search –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ GGsel
2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è —Ç–æ–≤–∞—Ä
3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
4. –£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Ü–µ–Ω—É
5. –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã!

–ë–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤.
    """
    
    bot.send_message(message.chat.id, help_text)

# –ö–æ–º–∞–Ω–¥–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
@bot.message_handler(commands=['debug'])
def debug_parser(message):
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞"""
    bot.send_message(message.chat.id, "üîß –ó–∞–ø—É—Å–∫–∞—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –ø–∞—Ä—Å–µ—Ä–∞ GGsel...")
    
    if not parser or not parser.driver:
        bot.send_message(message.chat.id, 
                       "‚ùå Selenium –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω\n"
                       "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É Chrome –∏ ChromeDriver")
        return
    
    bot.send_message(message.chat.id, 
                   "‚úÖ Selenium –¥–æ—Å—Ç—É–ø–µ–Ω\n"
                   "üåê –ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω\n"
                   "üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –Ω–∞ GGsel...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è GGsel
    test_queries = ["Steam", "Fortnite", "Minecraft"]
    
    for query in test_queries:
        bot.send_message(message.chat.id, f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –Ω–∞ GGsel: '{query}'")
        
        products = parser.search_products(query, max_results=2)
        
        if isinstance(products, list) and len(products) > 0 and isinstance(products[0], str):
            error_msg = products[0]
            if error_msg == "selenium_error":
                bot.send_message(message.chat.id, f"‚ùå '{query}': –û—à–∏–±–∫–∞ Selenium")
            else:
                bot.send_message(message.chat.id, f"‚ùå '{query}': –û—à–∏–±–∫–∞ - {error_msg}")
        elif products:
            bot.send_message(message.chat.id, f"‚úÖ '{query}': –ù–∞–π–¥–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ GGsel")
            for product in products[:1]:
                price_text = f"{product['price']} —Ä—É–±." if product['price'] > 0 else "—Ü–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                seller_text = f", –ø—Ä–æ–¥–∞–≤–µ—Ü: {product['seller']}" if product.get('seller') else ""
                bot.send_message(message.chat.id, 
                               f"–ü—Ä–∏–º–µ—Ä: {product['name'][:60]}...\n–¶–µ–Ω–∞: {price_text}{seller_text}")
        else:
            bot.send_message(message.chat.id, f"‚ùå '{query}': –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        time.sleep(3)
    
    bot.send_message(message.chat.id, 
                    "üìä –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
                    "üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç—ã –∏ HTML —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ debug_pages_ggsel/\n"
                    "üëÄ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á—Ç–æ –≤–∏–¥–∏—Ç –±—Ä–∞—É–∑–µ—Ä!")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=['text'])
def handle_text(message):
    if message.text == '–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞':
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞ GGsel:")
        bot.register_next_step_handler(message, process_search_query)
    
    elif message.text == '–ú–æ–∏ —Ç–æ–≤–∞—Ä—ã':
        show_user_products(message)
    
    elif message.text == '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–Ω—ã':
        check_prices_now(message)
    
    elif message.text == '–ü–æ–º–æ—â—å':
        send_help(message)
    
    elif message.text == '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞':
        debug_parser(message)
    
    else:
        bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã")

# –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤
@bot.message_handler(commands=['search'])
def search_products(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞ GGsel:")
    bot.register_next_step_handler(message, process_search_query)

def process_search_query(message):
    query = message.text.strip()
    if len(query) < 2:
        bot.send_message(message.chat.id, "–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    if not parser or not parser.driver:
        bot.send_message(message.chat.id, 
                       "‚ùå –ü–∞—Ä—Å–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /debug –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.")
        return
    
    bot.send_message(message.chat.id, f"üîç –ò—â—É '{query}' –Ω–∞ GGsel...\n‚ö° –ò—Å–ø–æ–ª—å–∑—É—é —Ä–µ–∞–ª—å–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä...")
    
    try:
        products = parser.search_products(query, max_results=5)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
        if isinstance(products, list) and products and isinstance(products[0], str):
            error_type = products[0]
            if error_type == "selenium_error":
                bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /debug")
                return
            else:
                bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {error_type}")
                return
        
        if not products:
            bot.send_message(message.chat.id, 
                           "‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ GGsel.\n\n"
                           "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                           "‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å\n"
                           "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–∞–π—Ç–æ–º\n"
                           "‚Ä¢ –¢–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏\n"
                           "üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
        for i, product in enumerate(products, 1):
            product_text = format_ggsel_product_info(product, i)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
            if product.get('image') and product['image'].startswith('http'):
                try:
                    bot.send_photo(message.chat.id, product['image'], 
                                 caption=product_text, parse_mode='HTML')
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
                    bot.send_message(message.chat.id, product_text, parse_mode='HTML')
            else:
                bot.send_message(message.chat.id, product_text, parse_mode='HTML')
        
        bot.send_message(message.chat.id, 
                        "üí° –ß—Ç–æ–±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–æ–≤–∞—Ä, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add")
        
    except Exception as e:
        bot.send_message(message.chat.id, f"üí• –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}")

def format_ggsel_product_info(product, number=1):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ —Å GGsel"""
    rating_text = f"‚≠ê {product['rating']}" if product['rating'] > 0 else "‚≠ê –ù–µ—Ç –æ—Ü–µ–Ω–æ–∫"
    seller_text = f"üè™ {product['seller']}" if product.get('seller') else "üè™ –ü—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ —É–∫–∞–∑–∞–Ω"
    platform_text = f"üéÆ {product.get('platform', 'GGsel')}"
    
    return f"""
<b>–¢–æ–≤–∞—Ä #{number} - {platform_text}</b>
<b>{product['name']}</b>
üí∞ <b>–¶–µ–Ω–∞: {product['price']:,} ‚ÇΩ</b>
{rating_text}
{seller_text}
üîó <a href="{product['link']}">–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä</a>
    """.replace(',', ' ')

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
@bot.message_handler(commands=['add'])
def add_product(message):
    if not parser or not parser.driver:
        bot.send_message(message.chat.id, "‚ùå –ü–∞—Ä—Å–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /debug –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.")
        return
        
    bot.send_message(message.chat.id, 
                    "–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä —Å GGsel\n\n"
                    "–ü—Ä–∏–º–µ—Ä:\n"
                    "https://ggsel.com/...\n"
                    "–∏–ª–∏\n"
                    "https://ggsel.net/...")
    bot.register_next_step_handler(message, process_product_url)

def process_product_url(message):
    url = message.text.strip()
    
    if 'ggsel' not in url:
        bot.send_message(message.chat.id, "–≠—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞ –Ω–∞ GGsel. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
    bot.send_message(message.chat.id, "‚ö° –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ —á–µ—Ä–µ–∑ —Ä–µ–∞–ª—å–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä...")
    
    current_price = parser.get_product_price(url)
    
    if current_price == 0:
        bot.send_message(message.chat.id, 
                        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞.\n\n"
                        "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                        "‚Ä¢ –¢–æ–≤–∞—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"
                        "‚Ä¢ –ò–∑–º–µ–Ω–∏–ª–∞—Å—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∞–π—Ç–∞\n"
                        "‚Ä¢ –¢–æ–≤–∞—Ä —Å–Ω—è—Ç —Å –ø—Ä–æ–¥–∞–∂–∏\n"
                        "üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
    product_name = f"–¢–æ–≤–∞—Ä —Å GGsel ({current_price} —Ä—É–±.)"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–µ–ª–µ–≤—É—é —Ü–µ–Ω—É
    bot.send_message(message.chat.id, 
                    f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price} ‚ÇΩ\n\n"
                    f"üéØ –£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é —Ü–µ–Ω—É (–≤ —Ä—É–±–ª—è—Ö):\n"
                    f"–ü—Ä–∏–º–µ—Ä: 500")
    bot.register_next_step_handler(message, process_target_price, url, product_name, current_price)

def process_target_price(message, product_url, product_name, current_price):
    try:
        target_price = float(message.text.replace(' ', '').replace(',', '.'))
        
        if target_price <= 0:
            bot.send_message(message.chat.id, "–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('ggsel_market.db')
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO products (user_id, product_name, product_url, target_price, current_price, last_check)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (message.from_user.id, product_name, product_url, target_price, current_price, datetime.now()))
        
        conn.commit()
        conn.close()
        
        status = "üéâ –£–∂–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!" if current_price <= target_price else "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ"
        
        bot.send_message(message.chat.id,
                        f"‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è!\n\n"
                        f"{product_name}\n"
                        f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price} ‚ÇΩ\n"
                        f"üéØ –¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞: {target_price} ‚ÇΩ\n"
                        f"üìä –°—Ç–∞—Ç—É—Å: {status}\n\n"
                        f"–ë–æ—Ç –±—É–¥–µ—Ç —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–∞—Å –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã!")
        
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 500)")

# –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(commands=['my_products'])
def show_user_products(message):
    user_id = message.from_user.id
    
    conn = sqlite3.connect('ggsel_market.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT id, product_name, product_url, target_price, current_price, last_check
        FROM products 
        WHERE user_id = ? AND is_active = TRUE
        ORDER BY last_check DESC
    ''', (user_id,))
    
    products = cursor.fetchall()
    conn.close()
    
    if not products:
        bot.send_message(message.chat.id, 
                        "–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä.")
        return
    
    for product in products:
        product_id, name, url, target_price, current_price, last_check = product
        
        status = "üéâ –¶–µ–Ω–∞ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!" if current_price <= target_price else "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ"
        
        product_info = f"""
<b>–¢–æ–≤–∞—Ä #{product_id} - GGsel</b>
{name}
üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <b>{current_price:,} ‚ÇΩ</b>
üéØ –¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞: <b>{target_price:,} ‚ÇΩ</b>
üìä –°—Ç–∞—Ç—É—Å: {status}
üïí –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {last_check}
üîó <a href="{url}">–°—Å—ã–ª–∫–∞</a>
        """.replace(',', ' ')
        
        # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        markup = types.InlineKeyboardMarkup()
        btn_check = types.InlineKeyboardButton('üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å', callback_data=f'check_{product_id}')
        btn_delete = types.InlineKeyboardButton('‚ùå –£–¥–∞–ª–∏—Ç—å', callback_data=f'delete_{product_id}')
        markup.add(btn_check, btn_delete)
        
        bot.send_message(message.chat.id, product_info, parse_mode='HTML', reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    if call.data.startswith('check_'):
        product_id = int(call.data.split('_')[1])
        check_single_product(call.message, product_id)
    
    elif call.data.startswith('delete_'):
        product_id = int(call.data.split('_')[1])
        delete_product(call.message, product_id)

def check_single_product(message, product_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
    conn = sqlite3.connect('ggsel_market.db')
    cursor = conn.cursor()
    
    cursor.execute('SELECT product_url, current_price, product_name, target_price FROM products WHERE id = ?', (product_id,))
    product = cursor.fetchone()
    
    if product:
        product_url, old_price, product_name, target_price = product
        
        if not parser or not parser.driver:
            bot.send_message(message.chat.id, "‚ùå –ü–∞—Ä—Å–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω.")
            conn.close()
            return
            
        new_price = parser.get_product_price(product_url)
        
        if new_price > 0:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –≤ –±–∞–∑–µ
            cursor.execute('''
                UPDATE products 
                SET current_price = ?, last_check = ?
                WHERE id = ?
            ''', (new_price, datetime.now(), product_id))
            
            conn.commit()
            
            if new_price <= target_price and old_price > target_price:
                bot.send_message(message.chat.id,
                                f"üéâ –¶–ï–õ–ï–í–ê–Ø –¶–ï–ù–ê –î–û–°–¢–ò–ì–ù–£–¢–ê!\n\n"
                                f"{product_name}\n"
                                f"üí∞ –ù–æ–≤–∞—è —Ü–µ–Ω–∞: {new_price} ‚ÇΩ\n"
                                f"üéØ –¶–µ–ª—å: {target_price} ‚ÇΩ\n"
                                f"üìä –ë—ã–ª–æ: {old_price} ‚ÇΩ")
            elif new_price != old_price:
                bot.send_message(message.chat.id, 
                                f"üìà –ò–ó–ú–ï–ù–ï–ù–ò–ï –¶–ï–ù–´\n\n"
                                f"{product_name}\n"
                                f"üìä –ë—ã–ª–æ: {old_price} ‚ÇΩ\n"
                                f"üí∞ –°—Ç–∞–ª–æ: {new_price} ‚ÇΩ")
            else:
                bot.send_message(message.chat.id, 
                                f"‚úÖ –¶–µ–Ω–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å\n\n"
                                f"{product_name}\n"
                                f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {new_price} ‚ÇΩ")
        else:
            bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É")
    
    conn.close()

def delete_product(message, product_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
    conn = sqlite3.connect('ggsel_market.db')
    cursor = conn.cursor()
    
    cursor.execute('UPDATE products SET is_active = FALSE WHERE id = ?', (product_id,))
    conn.commit()
    conn.close()
    
    bot.send_message(message.chat.id, "‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ü–µ–Ω
@bot.message_handler(commands=['check'])
def check_prices_now(message):
    user_id = message.from_user.id
    
    if not parser or not parser.driver:
        bot.send_message(message.chat.id, "‚ùå –ü–∞—Ä—Å–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /debug –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.")
        return
        
    bot.send_message(message.chat.id, "üîç –ü—Ä–æ–≤–µ—Ä—è—é —Ü–µ–Ω—ã –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ GGsel...")
    
    conn = sqlite3.connect('ggsel_market.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT id, product_url, product_name, current_price, target_price
        FROM products 
        WHERE user_id = ? AND is_active = TRUE
    ''', (user_id,))
    
    products = cursor.fetchall()
    
    if not products:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")
        conn.close()
        return
    
    updated_count = 0
    
    for product in products:
        product_id, url, name, old_price, target_price = product
        new_price = parser.get_product_price(url)
        
        if new_price > 0 and new_price != old_price:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É
            cursor.execute('''
                UPDATE products 
                SET current_price = ?, last_check = ?
                WHERE id = ?
            ''', (new_price, datetime.now(), product_id))
            
            updated_count += 1
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã
            if new_price <= target_price:
                bot.send_message(message.chat.id,
                                f"üéâ –¶–ï–õ–ï–í–ê–Ø –¶–ï–ù–ê –î–û–°–¢–ò–ì–ù–£–¢–ê!\n\n"
                                f"{name}\n"
                                f"üí∞ –ù–æ–≤–∞—è —Ü–µ–Ω–∞: {new_price} ‚ÇΩ\n"
                                f"üéØ –¶–µ–ª—å: {target_price} ‚ÇΩ\n"
                                f"üîó {url}")
            else:
                bot.send_message(message.chat.id,
                                f"üìà –ò–ó–ú–ï–ù–ï–ù–ò–ï –¶–ï–ù–´\n\n"
                                f"{name}\n"
                                f"üìä –ë—ã–ª–æ: {old_price} ‚ÇΩ\n"
                                f"üí∞ –°—Ç–∞–ª–æ: {new_price} ‚ÇΩ\n"
                                f"üîó {url}")
        
        # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        time.sleep(5)
    
    conn.commit()
    conn.close()
    
    if updated_count == 0:
        bot.send_message(message.chat.id, "‚úÖ –í—Å–µ —Ü–µ–Ω—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã!")
    else:
        bot.send_message(message.chat.id, f"üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} —Ü–µ–Ω.")

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω
def background_price_checker():
    def job():
        try:
            print(f"\nüïí –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω –Ω–∞ GGsel: {datetime.now()}")
            
            if not parser or not parser.driver:
                print("‚ùå –ü–∞—Ä—Å–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏")
                return
                
            conn = sqlite3.connect('ggsel_market.db')
            cursor = conn.cursor()
            
            cursor.execute('SELECT DISTINCT user_id FROM products WHERE is_active = TRUE')
            users = cursor.fetchall()
            
            total_updated = 0
            
            for user in users:
                user_id = user[0]
                
                cursor.execute('''
                    SELECT id, product_url, product_name, current_price, target_price
                    FROM products 
                    WHERE user_id = ? AND is_active = TRUE
                ''', (user_id,))
                
                products = cursor.fetchall()
                
                for product in products:
                    product_id, url, name, old_price, target_price = product
                    new_price = parser.get_product_price(url)
                    
                    if new_price > 0 and new_price != old_price:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É
                        cursor.execute('''
                            UPDATE products 
                            SET current_price = ?, last_check = ?
                            WHERE id = ?
                        ''', (new_price, datetime.now(), product_id))
                        
                        total_updated += 1
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        if new_price <= target_price:
                            bot.send_message(user_id,
                                            f"üéâ –¶–ï–õ–ï–í–ê–Ø –¶–ï–ù–ê –î–û–°–¢–ò–ì–ù–£–¢–ê!\n\n"
                                            f"{name}\n"
                                            f"üí∞ –ù–æ–≤–∞—è —Ü–µ–Ω–∞: {new_price} ‚ÇΩ\n"
                                            f"üéØ –¶–µ–ª—å: {target_price} ‚ÇΩ")
                        else:
                            bot.send_message(user_id,
                                            f"üìà –ò–ó–ú–ï–ù–ï–ù–ò–ï –¶–ï–ù–´\n\n"
                                            f"{name}\n"
                                            f"üìä –ë—ã–ª–æ: {old_price} ‚ÇΩ\n"
                                            f"üí∞ –°—Ç–∞–ª–æ: {new_price} ‚ÇΩ")
                    
                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    time.sleep(10)
            
            conn.commit()
            conn.close()
            
            print(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ GGsel –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±–Ω–æ–≤–ª–µ–Ω–æ: {total_updated} —Ü–µ–Ω")
            
        except Exception as e:
            print(f"üí• –û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ GGsel: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
    schedule.every(6).hours.do(job)
    
    while True:
        schedule.run_pending()
        time.sleep(60)

# –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
def start_background_jobs():
    thread = threading.Thread(target=background_price_checker, daemon=True)
    thread.start()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
import atexit

@atexit.register
def cleanup():
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã"""
    print("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã GGsel –±–æ—Ç–∞...")
    if parser:
        parser.close()

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ GGsel...")
    print("‚ö° –†–ï–ñ–ò–ú - –ø–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ Selenium!")
    print("üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ –ø–∞–ø–∫—É debug_pages_ggsel/")
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    if not os.path.exists("debug_pages_ggsel"):
        os.makedirs("debug_pages_ggsel")
    
    init_db()
    start_background_jobs()
    
    if parser and parser.driver:
        print("‚úÖ –ë–æ—Ç GGsel –∑–∞–ø—É—â–µ–Ω!")
        print("üîç –ü–∞—Ä—Å–µ—Ä –≥–æ—Ç–æ–≤ –∫ –ø–æ–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ GGsel")
    else:
        print("‚ö†Ô∏è –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º")
        print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /debug –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
    
    print("üìù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /search –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
    
    try:
        bot.infinity_polling()
    except KeyboardInterrupt:
        print("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ GGsel –±–æ—Ç–∞...")
    finally:
        if parser:
            parser.close()