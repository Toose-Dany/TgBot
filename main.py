import logging
import sqlite3
import requests
import schedule
import time
import threading
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "YOUR_BOT_TOKEN_HERE"
GGSELL_API_KEY = "YOUR_GGSELL_API_KEY"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('ggsell_monitor.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            registered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS products (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            product_name TEXT,
            product_url TEXT,
            product_id TEXT,
            target_price REAL,
            current_price REAL,
            last_check TIMESTAMP,
            is_active BOOLEAN DEFAULT TRUE,
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS price_history (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            product_id INTEGER,
            price REAL,
            checked_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (product_id) REFERENCES products (id)
        )
    ''')
    
    conn.commit()
    conn.close()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def register_user(user_id, username, first_name, last_name):
    conn = sqlite3.connect('ggsell_monitor.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        INSERT OR IGNORE INTO users (user_id, username, first_name, last_name)
        VALUES (?, ?, ?, ?)
    ''', (user_id, username, first_name, last_name))
    
    conn.commit()
    conn.close()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ —Å GGSell
def get_ggsell_product_info(product_url):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ —Å GGSell
    """
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞ –∏–∑ URL
        product_id = extract_product_id_from_url(product_url)
        
        if not product_id:
            return None
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å –∫ API GGSell
        # –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã API –∑–∞–ø—Ä–æ—Å–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç)
        headers = {
            'Authorization': f'Bearer {GGSELL_API_KEY}',
            'User-Agent': 'PriceMonitorBot/1.0'
        }
        
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç API GGSell (–Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å —É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤)
        api_url = f"https://api.ggsell.com/v1/products/{product_id}"
        
        response = requests.get(api_url, headers=headers, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            
            return {
                'name': data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä'),
                'price': float(data.get('price', 0)),
                'original_price': float(data.get('original_price', 0)),
                'discount': data.get('discount', 0),
                'available': data.get('in_stock', False),
                'rating': data.get('rating', 0),
                'image_url': data.get('image', ''),
                'category': data.get('category', '')
            }
        else:
            # –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            return parse_ggsell_page(product_url)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ —Å GGSell: {e}")
        return None

def extract_product_id_from_url(url):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç ID —Ç–æ–≤–∞—Ä–∞ –∏–∑ URL GGSell
    –ü—Ä–∏–º–µ—Ä—ã URL:
    - https://ggsell.ru/product/12345
    - https://ggsell.com/game/abc-def-123
    """
    try:
        # –£–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        url = url.split('?')[0]
        
        # –†–∞–∑–¥–µ–ª—è–µ–º URL –ø–æ —Å–ª–µ—à–∞–º
        parts = url.rstrip('/').split('/')
        
        # ID —Ç–æ–≤–∞—Ä–∞ –æ–±—ã—á–Ω–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å URL
        product_id = parts[-1]
        
        return product_id if product_id else None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID –∏–∑ URL: {e}")
        return None

def parse_ggsell_page(url):
    """
    –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞ GGSell (–∑–∞–ø–∞—Å–Ω–æ–π –º–µ—Ç–æ–¥)
    """
    try:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
        
        response = requests.get(url, headers=headers, timeout=10)
        
        if response.status_code == 200:
            # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            # –≠—Ç–æ –ø—Ä–∏–º–µ—Ä - –Ω—É–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É GGSell
            from bs4 import BeautifulSoup
            soup = BeautifulSoup(response.content, 'html.parser')
            
            # –ü—Ä–∏–º–µ—Ä –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å —Å–µ–ª–µ–∫—Ç–æ—Ä—ã)
            name_elem = soup.find('h1') or soup.find('title')
            price_elem = soup.find('span', class_='price') or soup.find('meta', itemprop='price')
            
            name = name_elem.get_text().strip() if name_elem else '–¢–æ–≤–∞—Ä GGSell'
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É
            price = 0
            if price_elem:
                price_text = price_elem.get('content') or price_elem.get_text()
                # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ç–æ—á–∫–∏
                import re
                price_match = re.search(r'(\d+[.,]?\d*)', price_text)
                if price_match:
                    price = float(price_match.group(1).replace(',', '.'))
            
            return {
                'name': name,
                'price': price,
                'available': True,
                'rating': 0
            }
        else:
            return None
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã GGSell: {e}")
        return None

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    register_user(user.id, user.username, user.first_name, user.last_name)
    
    welcome_text = f"""
üéÆ –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

–Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω –Ω–∞ GGSell - –º–∞–≥–∞–∑–∏–Ω–µ –∏–≥—Ä –∏ —Å–æ—Ñ—Ç–∞.

üìä –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ü–µ–Ω –Ω–∞ –∏–≥—Ä—ã –∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã
‚Ä¢ –°–ª–µ–∂–µ–Ω–∏–µ –∑–∞ —Å–∫–∏–¥–∫–∞–º–∏
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–µ–ª–µ–≤–æ–π —Ü–µ–Ω—ã

üìù –ö–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
/add_product - –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
/my_products - –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã
/check_prices - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–Ω—ã —Å–µ–π—á–∞—Å
/help - –ü–æ–º–æ—â—å

üéØ –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /add_product
    """
    
    await update.message.reply_text(welcome_text)

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/add_product - –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
/my_products - –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ —Ç–æ–≤–∞—Ä—ã
/check_prices - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–Ω—ã —Å–µ–π—á–∞—Å
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üîç –ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä:
1. –ù–∞–π—Ç–∏ –∏–≥—Ä—É/–ø—Ä–æ–≥—Ä–∞–º–º—É –Ω–∞ GGSell
2. –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä
3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /add_product
4. –í—Å—Ç–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –∏ —É–∫–∞–∑–∞—Ç—å –∂–µ–ª–∞–µ–º—É—é —Ü–µ–Ω—É

üïê –ë–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–Ω—ã –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞ –∏ —É–≤–µ–¥–æ–º–∏—Ç –≤–∞—Å, –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç —Ü–µ–ª–µ–≤–æ–π.

üéÆ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã:
‚Ä¢ –ò–≥—Ä—ã –¥–ª—è PC, PlayStation, Xbox
‚Ä¢ –ò–≥—Ä–æ–≤—ã–µ –∫–ª—é—á–∏
‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ
‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∏
    """
    await update.message.reply_text(help_text)

# –ö–æ–º–∞–Ω–¥–∞ /add_product
async def add_product(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üîó –ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä —Å GGSell\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ https://ggsell.ru/product/cyberpunk-2077\n"
        "‚Ä¢ https://ggsell.com/game/gta-v-premium\n"
        "‚Ä¢ https://ggsell.ru/software/windows-11-pro"
    )
    context.user_data['awaiting_url'] = True

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Å—Å—ã–ª–∫–∞–º–∏
async def handle_url(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('awaiting_url'):
        url = update.message.text
        
        if 'ggsell' not in url:
            await update.message.reply_text("‚ùå –≠—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞ –Ω–∞ GGSell. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞
        await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Ç–æ–≤–∞—Ä...")
        
        product_info = get_ggsell_product_info(url)
        
        if not product_info:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            context.user_data.clear()
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–µ–ª–µ–≤—É—é —Ü–µ–Ω—É
        context.user_data['product_url'] = url
        context.user_data['product_info'] = product_info
        context.user_data['awaiting_url'] = False
        context.user_data['awaiting_price'] = True
        
        discount_text = ""
        if product_info.get('original_price') and product_info['original_price'] > product_info['price']:
            discount = ((product_info['original_price'] - product_info['price']) / product_info['original_price']) * 100
            discount_text = f"\nüè∑Ô∏è –°–∫–∏–¥–∫–∞: {discount:.0f}% (–±—ã–ª–æ {product_info['original_price']} —Ä—É–±.)"
        
        availability = "‚úÖ –í –Ω–∞–ª–∏—á–∏–∏" if product_info.get('available', True) else "‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏"
        
        await update.message.reply_text(
            f"üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: {product_info['name']}\n"
            f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {product_info['price']} —Ä—É–±.{discount_text}\n"
            f"üìä {availability}\n\n"
            f"üéØ –£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é —Ü–µ–Ω—É (–≤ —Ä—É–±–ª—è—Ö):\n"
            f"–ü—Ä–∏–º–µ—Ä: 500 –∏–ª–∏ 1499.99"
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–ª–µ–≤–æ–π —Ü–µ–Ω—ã
async def handle_target_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('awaiting_price'):
        try:
            target_price = float(update.message.text)
            
            if target_price <= 0:
                await update.message.reply_text("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return
            
            product_info = context.user_data['product_info']
            product_url = context.user_data['product_url']
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            conn = sqlite3.connect('ggsell_monitor.db')
            cursor = conn.cursor()
            
            product_id = extract_product_id_from_url(product_url)
            
            cursor.execute('''
                INSERT INTO products (user_id, product_name, product_url, product_id, target_price, current_price, last_check)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            ''', (
                update.effective_user.id,
                product_info['name'],
                product_url,
                product_id,
                target_price,
                product_info['price'],
                datetime.now()
            ))
            
            conn.commit()
            conn.close()
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            context.user_data.clear()
            
            await update.message.reply_text(
                f"‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è!\n\n"
                f"üéÆ {product_info['name']}\n"
                f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {product_info['price']} —Ä—É–±.\n"
                f"üéØ –¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞: {target_price} —Ä—É–±.\n\n"
                f"üìä –ë–æ—Ç –±—É–¥–µ—Ç —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–∞—Å –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã.\n"
                f"–°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 4 —á–∞—Å–∞."
            )
            
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 500 –∏–ª–∏ 1499.99)")

# –ö–æ–º–∞–Ω–¥–∞ /my_products
async def my_products(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    conn = sqlite3.connect('ggsell_monitor.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT id, product_name, product_url, target_price, current_price, last_check
        FROM products 
        WHERE user_id = ? AND is_active = TRUE
        ORDER BY last_check DESC
    ''', (user_id,))
    
    products = cursor.fetchall()
    conn.close()
    
    if not products:
        await update.message.reply_text(
            "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_product —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä—É –∏–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É."
        )
        return
    
    message = "üéÆ –í–∞—à–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã:\n\n"
    
    for product in products:
        product_id, name, url, target_price, current_price, last_check = product
        
        status = "üéâ –¶–µ–Ω–∞ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!" if current_price <= target_price else "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ"
        price_diff = current_price - target_price
        
        message += f"üÜî ID: {product_id}\n"
        message += f"üéÆ {name}\n"
        message += f"üí∞ –¢–µ–∫—É—â–∞—è: {current_price} —Ä—É–±.\n"
        message += f"üéØ –¶–µ–ª–µ–≤–∞—è: {target_price} —Ä—É–±.\n"
        
        if current_price > target_price:
            message += f"üìà –û—Å—Ç–∞–ª–æ—Å—å: {price_diff:.0f} —Ä—É–±.\n"
        
        message += f"üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {last_check}\n"
        message += f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
        message += "‚îÄ" * 30 + "\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard = [
        [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–Ω—ã —Å–µ–π—á–∞—Å", callback_data="check_prices")],
        [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="delete_product")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(message, reply_markup=reply_markup)

# –ö–æ–º–∞–Ω–¥–∞ /check_prices
async def check_prices(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã...")
    await check_user_prices(user_id, context)
    await update.message.reply_text("‚úÖ –¶–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    data = query.data
    user_id = query.from_user.id
    
    if data == "check_prices":
        await query.edit_message_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Ü–µ–Ω—ã...")
        await check_user_prices(user_id, context)
        await query.edit_message_text("‚úÖ –¶–µ–Ω—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
    
    elif data == "delete_product":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        context.user_data['awaiting_delete_id'] = True
    
    elif data == "stats":
        await show_stats(query, user_id)

# –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
async def show_stats(query, user_id):
    conn = sqlite3.connect('ggsell_monitor.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT COUNT(*), 
               SUM(CASE WHEN current_price <= target_price THEN 1 ELSE 0 END)
        FROM products 
        WHERE user_id = ? AND is_active = TRUE
    ''', (user_id,))
    
    total, reached = cursor.fetchone()
    
    cursor.execute('''
        SELECT COUNT(DISTINCT DATE(last_check)) 
        FROM products 
        WHERE user_id = ?
    ''', (user_id,))
    
    days_active = cursor.fetchone()[0]
    
    conn.close()
    
    stats_text = f"""
üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:

üéÆ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total}
üéØ –¶–µ–Ω –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ: {reached}
üìÖ –î–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {days_active}

üí° –°–æ–≤–µ—Ç: –î–æ–±–∞–≤–ª—è–π—Ç–µ –±–æ–ª—å—à–µ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è!
    """
    
    await query.edit_message_text(stats_text)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def check_user_prices(user_id, context):
    conn = sqlite3.connect('ggsell_monitor.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT id, product_url, product_name, target_price, current_price 
        FROM products 
        WHERE user_id = ? AND is_active = TRUE
    ''', (user_id,))
    
    products = cursor.fetchall()
    
    updates = []
    
    for product in products:
        product_id, url, name, target_price, old_price = product
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
        product_info = get_ggsell_product_info(url)
        
        if product_info:
            new_price = product_info['price']
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            cursor.execute('''
                UPDATE products 
                SET current_price = ?, last_check = ?
                WHERE id = ?
            ''', (new_price, datetime.now(), product_id))
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            cursor.execute('''
                INSERT INTO price_history (product_id, price)
                VALUES (?, ?)
            ''', (product_id, new_price))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
            price_changed = abs(new_price - old_price) > 0.01
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –ª–∏ —Ü–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞
            target_reached = new_price <= target_price and old_price > target_price
            
            if price_changed or target_reached:
                updates.append({
                    'name': name,
                    'old_price': old_price,
                    'new_price': new_price,
                    'target_price': target_price,
                    'target_reached': target_reached,
                    'url': url
                })
    
    conn.commit()
    conn.close()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
    for update_info in updates:
        try:
            if update_info['target_reached']:
                message = f"""
üéâ –¶–ï–õ–ï–í–ê–Ø –¶–ï–ù–ê –î–û–°–¢–ò–ì–ù–£–¢–ê!

üéÆ {update_info['name']}
üí∞ –ù–æ–≤–∞—è —Ü–µ–Ω–∞: {update_info['new_price']} —Ä—É–±.
üéØ –í–∞—à–∞ —Ü–µ–ª—å: {update_info['target_price']} —Ä—É–±.

üõí –°–∫–æ—Ä–µ–µ –ø–æ–∫—É–ø–∞–π—Ç–µ: {update_info['url']}
                """
            else:
                message = f"""
üìà –ò–ó–ú–ï–ù–ï–ù–ò–ï –¶–ï–ù–´

üéÆ {update_info['name']}
üìâ –ë—ã–ª–æ: {update_info['old_price']} —Ä—É–±.
üìà –°—Ç–∞–ª–æ: {update_info['new_price']} —Ä—É–±.
üéØ –¶–µ–ª—å: {update_info['target_price']} —Ä—É–±.

üîó {update_info['url']}
                """
            
            await context.bot.send_message(chat_id=user_id, text=message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω
def background_price_checker(app):
    def job():
        conn = sqlite3.connect('ggsell_monitor.db')
        cursor = conn.cursor()
        
        cursor.execute('SELECT DISTINCT user_id FROM products WHERE is_active = TRUE')
        users = cursor.fetchall()
        conn.close()
        
        for user in users:
            user_id = user[0]
            asyncio.run_coroutine_threadsafe(
                check_user_prices(user_id, app),
                app._loop
            )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞
    schedule.every(4).hours.do(job)
    
    while True:
        schedule.run_pending()
        time.sleep(60)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("add_product", add_product))
    application.add_handler(CommandHandler("my_products", my_products))
    application.add_handler(CommandHandler("check_prices", check_prices))
    
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_url))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_target_price))
    
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω
    price_checker_thread = threading.Thread(
        target=background_price_checker, 
        args=(application,),
        daemon=True
    )
    price_checker_thread.start()
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("GGSell Price Monitor Bot –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == '__main__':
    main()